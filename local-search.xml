<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Javascript - 為什麼 Error 是空物件？</title>
    <link href="/2021/07/17/Javascript-Print-Error/"/>
    <url>/2021/07/17/Javascript-Print-Error/</url>
    
    <content type="html"><![CDATA[<h1 id="Javascript-為什麼-Error-是空物件？"><a href="#Javascript-為什麼-Error-是空物件？" class="headerlink" title="Javascript - 為什麼 Error 是空物件？"></a>Javascript - 為什麼 Error 是空物件？</h1><p>在研究 Async.js waterfall 的時候，感覺像被 javascript 給陰到了一樣</p><p>考慮下列的程式碼</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Async = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;async&#x27;</span>);<br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.google.com&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  &#125;)<br>    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;function 1:&#x27;</span>, res.status, res.statusText);<br>      <span class="hljs-keyword">return</span> res.status;<br>    &#125;)<br>    .catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;阿伯～出事了！阿伯！&#x27;</span>, error);<br>      <span class="hljs-keyword">throw</span> error;<br>    &#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func2</span>(<span class="hljs-params">status, callback</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;function 2:&#x27;</span>, status);<br>  callback(<span class="hljs-literal">null</span>, status);<br>&#125;<br><br>Async.waterfall([<br>  func1,<br>  func2,<br>], <span class="hljs-function">(<span class="hljs-params">error, result</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (error) <span class="hljs-built_in">console</span>.log(error)<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;result: &#x27;</span>, result);<br>&#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>沒發生錯誤時會輸出</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">function</span> <span class="hljs-number">1</span>: <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">function</span> <span class="hljs-number">2</span>: <span class="hljs-number">200</span><br><span class="hljs-attribute">result</span>:  <span class="hljs-number">200</span><br></code></pre></div></td></tr></table></figure><p>但只要丟出一個錯誤</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;function 1:&#x27;</span>, res.status, res.statusText);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Test error&quot;</span>;<br>      <span class="hljs-keyword">return</span> res.status;<br>    &#125;)<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>碰！</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> <span class="hljs-number">1</span>: <span class="hljs-number">200</span> OK<br>阿伯～出事了！阿伯！ Test error<br>Error: Test error<br>    at <span class="hljs-regexp">/Users/</span>hao<span class="hljs-regexp">/Projects/</span>nchc<span class="hljs-regexp">/xportal/</span>backend<span class="hljs-regexp">/node_modules/</span>async<span class="hljs-regexp">/dist/</span>async.js:<span class="hljs-number">173</span>:<span class="hljs-number">65</span><br>    at processTicksAndRejections (internal<span class="hljs-regexp">/process/</span>task_queues.js:<span class="hljs-number">93</span>:<span class="hljs-number">5</span>)<br></code></pre></div></td></tr></table></figure><p>asyncjs 會先拋出一個奇怪的錯誤，如果先去 google 的話，會覺得這個錯誤好像是 unhandledRejection 的問題</p><p>所以我開始找程式碼裡到底有哪裡沒加到，然後全部加過一輪後，一樣爆炸</p><p>證明這個思路不對，我開始嚐試走別條路</p><p>因為錯誤是 waterfall print error 的時候出現</p><p>我一度以為是 aysnc function 跟 非async function 不能這樣混用，又測試了多種寫法</p><p>結果也通通爆炸，呀哈哈哈～   ( σ ﾟ∀ ﾟ) ﾟ∀ﾟ)σ<br><br/></p><p>最後試著用別的方式印出 error</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">Async.waterfall([<br>  func1,<br>  func2,<br>], <span class="hljs-function">(<span class="hljs-params">error, result</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (error) <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.stringify(error))<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;result: &#x27;</span>, result);<br>&#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>喔喔！事情終於有了進展，錯誤沒有跑出來了！</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">1:</span> 200 OK<br>阿伯～出事了！阿伯！ Test error<br>&#123;&#125;<br></code></pre></div></td></tr></table></figure><p>可是為什麼是空物件呢…？<br>又經歷了各種嚐試，之後突然想到一件事情<br>我一直以為是 asyncjs 的寫法錯誤，才會造成 throw 出來的 error 接不到<br>可是如果是 javascript 的 error 本來就印不出來呢？</p><p>從這個思路終於找到問題，不是 asyncjs 不能 async 跟 非async 混用，而是 <strong>你沒辦法用 JSON.stringify() 去顯示 Javascript 的 Error 型態</strong></p><p><a href="https://stackoverflow.com/questions/38513493/why-are-my-js-promise-catch-error-objects-empty">Why are my JS promise catch error objects empty?</a><br><a href="https://stackoverflow.com/questions/18391212/is-it-not-possible-to-stringify-an-error-using-json-stringify">Is it not possible to stringify an Error using JSON.stringify?</a></p><p>主要的原因在於 asyncjs 的 waterfall 在接到 throw error 的時候，會把它包裝成 error 的型態，在 callback 的時候當然沒辦法直接印出來</p><p>比較簡單解決的方法是去存取 error 的 message</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br>Async.waterfall([<br>  func1,<br>  func2,<br>], <span class="hljs-function">(<span class="hljs-params">error, result</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (error) <span class="hljs-built_in">console</span>.log(error.message)<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;result: &#x27;</span>, result);<br>&#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">function 1: 200 OK<br>阿伯～出事了！阿伯！ Test error<br><span class="hljs-keyword">Test </span>error<br></code></pre></div></td></tr></table></figure><p>為了這種初學者的問題卡了半天，學藝不精，真是慚愧 ( ´•̥̥̥ω•̥̥̥` )</p>]]></content>
    
    
    
    <tags>
      
      <tag>Troubleshooting</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
