<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Socket-io Client disconnected</title>
    <link href="/2023/02/22/Socket-io-disconnected/"/>
    <url>/2023/02/22/Socket-io-disconnected/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.pexels.com/zh-tw/photo/13612923/">Pexels 上由 Frans van Heerden 拍攝的相片</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>遇到一個需求，當 User 關掉 Browser 的話，Frontend 需要送 Request 到 Backend 去執行某些動作</p><h1 id="估狗大神救救我啊～"><a href="#估狗大神救救我啊～" class="headerlink" title="估狗大神救救我啊～"></a>估狗大神救救我啊～</h1><p>拜了一下狗狗，發覺好像不是很難，Close Browser 有個叫 <code>beforeunload</code> 的 Event 可以觸發</p><p>參考了一下資料，產出如下的 React 程式碼</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// close window</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleWindowClosed</span> = (<span class="hljs-params">event</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (name) &#123;<br>      <span class="hljs-comment">// do something</span><br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;beforeunload&#x27;</span>, handleWindowClosed);<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;beforeunload&#x27;</span>, handleWindowClosed);<br>  &#125;;<br>&#125;, [name]);<br></code></pre></td></tr></table></figure><p>馬上來測試看看！</p><h1 id="Socket-io-client-下班啦～下班啦～"><a href="#Socket-io-client-下班啦～下班啦～" class="headerlink" title="Socket-io client: 下班啦～下班啦～"></a>Socket-io client: 下班啦～下班啦～</h1><p>一測試就翻車，跑的時候發現，Backend 不會執行我送過去的 Request</p><p>WHY？<br><br/></p><p>又做了多次的測試之後，發現當我一關掉 Browser Tab 的時候，Socket-io 就會馬上就斷開連線 ಠ_ಠ</p><p>因為 <code>do something</code> 是靠 Socket-io 連線將 Request 送到後端的，所以一但斷線的話後端就收不到 Request</p><p>咦？怎麼會這樣？<br><br/></p><p>好吧，既然你這麼急著走的話，那我加一個 <code>Confirm</code> 去中斷你的動作總可以了吧？</p><p>測試的結果是不行，Socket-io 還是會斷線給我看<br><br/></p><p>隔壁的同事好心幫我測試了一下，在他們的 Project 沒有測到斷線的情形。</p><p>奇怪了…… 怎麼會這樣呢？<br><br/></p><p>找了一些資料發現，在 Socket-io v3 的版本中，只要一按 Browser Tab 的 [x] 按鈕，Socket-io 馬上就會 disconnect，不管有沒有做 <code>confirm</code> 之類的動作都一樣</p><p>隔壁同事是 v2 的版本所以安全下莊……</p><p>哪泥？還有這種事？升級後反而不能連線了！</p><h1 id="所以我說，那個-Solution-呢？"><a href="#所以我說，那個-Solution-呢？" class="headerlink" title="所以我說，那個 Solution 呢？"></a>所以我說，那個 Solution 呢？</h1><p>在 Sokcet-io 的 Issue list 中，找到了一個 <a href="https://github.com/socketio/socket.io-client/issues/1451">issue</a> 問了跟我一樣的問題</p><p>這個功能其實是有辦法達成的，在 client 端連線的時候多加一個參數 <code>closeOnBeforeunload</code>，觸發 <code>beforeunload</code> 的時候就不會馬上斷線  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// socket-io client connect</span><br><span class="hljs-keyword">const</span> socket = io.<span class="hljs-title function_">connect</span>(<br>  socketServer,<br>  &#123;<br>    <span class="hljs-attr">closeOnBeforeunload</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// ... 略</span><br>  &#125;,<br>);<br></code></pre></td></tr></table></figure><p>不過遺憾的是 <code>closeOnBeforeunload</code> 這個參數只有在 <code>socket.io-client@4.1.0</code> 以上才有支援  </p><p>我們當前的 Project 使用的 socket.io-client 版本為 3.1.1  </p><p>又因為與其它 component 連動的關係，沒辦法輕易升級 </p><p>怎麼辦？要放棄了嗎？</p><h1 id="Another-Solution"><a href="#Another-Solution" class="headerlink" title="Another Solution"></a>Another Solution</h1><p>幸好，issue 中還有提到另一個解法</p><p>在 evnet 中加入 <code>event.stopImmediatePropagation()</code>，也可以確保連線不中斷！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleWindowClosed</span> = (<span class="hljs-params">event</span>) =&gt; &#123;<br>    event.<span class="hljs-title function_">preventDefault</span>();<br>    event.<span class="hljs-title function_">stopImmediatePropagation</span>();<br>    <span class="hljs-keyword">if</span> (name) &#123;<br>      <span class="hljs-comment">// do something</span><br>    &#125;<br>    event.<span class="hljs-property">returnValue</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>  &#125;;<br><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;beforeunload&#x27;</span>, handleWindowClosed);<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;beforeunload&#x27;</span>, handleWindowClosed);<br>  &#125;;<br>&#125;, []);<br></code></pre></td></tr></table></figure><p>不過一開始測試下來，發現也是沒有作用</p><p>本來以為被唬弄了，不過又經過一連串測試後，發現這個寫法只有在特定的情境下才能產生作用</p><p><code>event.stopImmediatePropagation</code> 只有在<br><strong>使用 class component 且在 constructor 中註冊 beforeunload 事件</strong><br>的條件下才有用！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TerminalClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;beforeunload&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>      event.<span class="hljs-title function_">preventDefault</span>();<br>      event.<span class="hljs-title function_">stopImmediatePropagation</span>();<br>      event.<span class="hljs-property">returnValue</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...略</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 function component 中不管有沒有使用 useEffect 連線都會中斷</p><p>後來在 issue 找到相關說法，作者說要在socket creation 前註冊 <a href="https://github.com/socketio/engine.io-client/issues/658#issuecomment-801506732">link</a></p><p>不過說老實話，不知道為什麼在 constructor 中才有作用 </p><p>因為照理說，我這個 component 應該也是在 socket creation 之後才建立的，不知道為什麼可以產生作用</p><p>反正測試起來的結果就是這樣 (´_ゝ&#96;)</p><br/><p>另外也要注意，class component 中較上層的 window 事件會覆蓋掉下層的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;beforeunload&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello app&#x27;</span>);<br>      event.<span class="hljs-title function_">preventDefault</span>();<br>      event.<span class="hljs-title function_">stopImmediatePropagation</span>();<br>      event.<span class="hljs-property">returnValue</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TerminalClass</span> <span class="hljs-attr">...</span> /&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TerminalClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;beforeunload&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello terminal&#x27;</span>);<br>      event.<span class="hljs-title function_">preventDefault</span>();<br>      event.<span class="hljs-title function_">stopImmediatePropagation</span>();<br>      event.<span class="hljs-property">returnValue</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ... 略</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 執行後只會出現 &#x27;hello app&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>依 React 的趨勢來說，不能用 function component 來解決實在是有點麻煩</p><p>最後還是決定等升級，在此做個研究心得記錄 XD</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>Program</category>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Troubleshooting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Creepy Javascript - (0, obj.method)()</title>
    <link href="/2022/07/18/Creepy-Javascript-0-obj-method/"/>
    <url>/2022/07/18/Creepy-Javascript-0-obj-method/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.pexels.com/zh-tw/photo/7035978/">Pexels 上由 Peter Lopez 拍攝的相片</a></p><hr/><p>Creepy Javascript 是記錄一些遇到奇怪的 Javascript 的寫法。</p><p>寫 Code 寫久了，偶爾會遇到一些看不懂，或者不知道為什麼要這樣寫的東西。</p><p>然後查過又忘記，所以就記錄下來，順便分享給大家知道。<br><br/></p><p>這次是在 Asyncjs 中看到這樣的寫法。</p><blockquote class="pullquote [class]"><p><code>var keys = (0, _keys2.default)(tasks);</code></p></blockquote><br/><p>雖然知道 <code>(0, _keys2.default)</code> 這種寫法會回傳 <code>_keys2.default</code>，但是不知道為什麼要這樣寫。</p><p>查了一下 Google 找到了這篇 <a href="https://stackoverflow.com/questions/40967162/what-is-the-meaning-of-this-code-0-function-in-javascript">What is the meaning of this code (0, function) in javascript</a></p><p>這種寫法有幾個特性：</p><ol><li>使用 eval 的時候，它可以轉換成 global variable</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// direct call to eval, creates local variable</span><br>  <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;var bar = 123&quot;</span>);<br>&#125;)();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar);            <span class="hljs-comment">// Reference Error</span><br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// indirect call to eval, creates global variable</span><br>  (<span class="hljs-number">0</span>, <span class="hljs-built_in">eval</span>)(<span class="hljs-string">&quot;var foo = 123&quot;</span>);<br>&#125;)();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo);            <span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure><ol start="2"><li>當你想呼叫某個 function，卻不想傳 obj 當 this 的話</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>; &#125;<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-title function_">method</span>() === obj);     <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-number">0</span>, obj.<span class="hljs-property">method</span>)() === obj); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>簡單來說，這種 <code>(0, obj.methed)()</code> 間接呼叫的方式，保證了該 function 是執行在 global scope 底下。</p><p>所以第一個 case 的 foo 會變成全域。</p><p>第二個 this 會不等於 obj (因為此時的 this 是 global)。<br><br/></p><p>下面這個例子會更加明顯，因此我覺得 <code>0</code> 這個數字根本不是重點。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-string">&#x27;outer&#x27;</span>;<br>(<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-string">&#x27;inner&#x27;</span>;<br>    <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;console.log(&quot;direct call: &quot; + x)&#x27;</span>);<br>    (<span class="hljs-number">1</span>, <span class="hljs-built_in">eval</span>)(<span class="hljs-string">&#x27;console.log(&quot;indirect call: &quot; + x)&#x27;</span>);<br>  &#125;<br>)();<br><br><span class="hljs-comment">// print</span><br><span class="hljs-comment">// direct call: inner</span><br><span class="hljs-comment">// indirect call: outer</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>Program</category>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CreepyJavascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漫談魂系</title>
    <link href="/2022/06/05/%E6%BC%AB%E8%AB%87%E9%AD%82%E7%B3%BB/"/>
    <url>/2022/06/05/%E6%BC%AB%E8%AB%87%E9%AD%82%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.pexels.com/zh-tw/photo/720732/">Pexels 上由 Micael Widell 拍攝的相片</a></p><hr /><p>說是魂系遊戲閒聊，可是我真正碰過的魂系遊戲也只有隻狼跟法環而已。</p><p>隻狼算是我魂系遊戲的啟蒙作，雖然一直聽過魂系遊戲的大名，不過對於黑暗靈魂那種西方魔幻背景的遊戲興趣缺缺，再加上種種(<del>價格</del>)因素考量，所以雖然隻狼一直放在我的願望清單中，卻也一直沒碰。<br><br /></p><p>一直到了某次 steam 的隻狼特價，我才下手買來玩看看。</p><p>沒想到一玩就上癮，我很久沒有體驗過打王手心還會出汗的緊張感。<br>打某些王的時候，我甚至要墊一張衛生紙在手把上，不然手把太滑握不住 (✧≖‿ゝ≖)</p><p>這是我幾乎已經遺忘的刺激感！<br><br /></p><p>魂系，在當今所有遊戲類型中獨樹一格的存在。</p><p>對比一般遊戲來說，以超高的難度而聞名，剛接觸的新手連路旁的小兵都打不過。我還記得我法環在一開始玩的時候，光打剛出來的廢墟的小隊長就不知道死幾次惹 (´_ゝ&#96;)</p><p>魂系的大名在當初黑暗靈魂一戰成名，各種類魂系的遊戲不斷出現<br>甚至任何只要難度較難的遊戲通通被冠上了魂系的稱號</p><p>魂系，到底是什麼？</p><p>我認為魂系的精髓在於<strong>成功挑戰困難 Boss 所取得的巨大成就感</strong>。<br><br /></p><p>我曾在經歷無數死亡後，成功打敗隻狼新手教官弦一郎時興奮不已。</p><p>也在面對覺得不可能可敗的劍聖一心戰中，一步一步的紮實的削磨軀幹值，取得最終的勝利。</p><p>面對艱辛挑戰後的巨大成就感，正是魂系最為迷人的地方！<br><br /></p><p>因為迷上隻狼的原因，在法環一出來的時候，我也是興沖沖的馬上預訂。</p><p>玩過之後，故且不論難度，我認為法環又將魂系遊戲推到了另一個層次，主要的原因在於法環是開放世界。</p><p>開放世界的賣點在於自由的探索，法環隱晦的設計又更放大了探索的樂趣。<br><br /></p><p>我剛進到法環，初從陰濕灰暗的漂流墓地出來時，眼前就是一片壯麗開闊的世界。</p><p>而且法環沒有任務提醒，真的一點點都沒有，我甚至搞不懂第一個 NPC 梵雷講的賜福指引是三小。</p><p>沒有任何提示下，我就這樣到處亂逛。<br>然後發現了另一個墓地，在墓地中打敗了 Boss 拿到寶物；晃到了一座湖，湖中居然出現了一隻龍，嚇得我趕快跑路。<br>再晃到其它地方，看見巨人、其它士兵、醜不拉幾的狗。</p><p>沒探索過的東西是如此新鮮，對於未知的好奇心，讓整個遊戲體驗變得非常的有趣。</p><p>我覺得這是法環做得滿成功的地方。<br><br /></p><p>對比隻狼，隻狼的探索要素就少了很多，但是我覺得在戰鬥方面隻狼則是更勝一籌。</p><p>隻狼的戰鬥系統實在是太獨特了，在我玩過的遊戲中還沒有看過跟隻狼一樣的系統。</p><p>隻狼需要格擋來削弱對手的軀幹值，直到削成零之後才能進行忍殺，而且大部份的忍殺都是一擊必殺，成功忍殺之後的爽快值爆表。<br><br /></p><p>在隻狼的戰鬥中，不能無腦的一直按攻擊，敵人會把你打得跟狗一樣。</p><p>你必須觀察敵人的招式，運用特定的動作去破解。</p><p>比方說當敵人劈砍的時候，你需要用防禦來格擋；<br>當敵人橫掃的時候，你必須跳起來才能躲過；<br>當敵人突刺的時候，你則可以用識破來抵擋。</p><p>而且隻狼動作失敗的反饋會非常明顯，就像剪刀石頭布一樣，敵人特定的動作出現時，你就會知道我要出石頭才閃得過這樣。<br><br /></p><p>相較於法環來說，法環的招式實在太多惹。</p><p>你比較難去知道說，敵人的這招我到底是要翻滾還是防禦，還是要放某種魔法才行。<br>反饋就比較沒那麼清楚，導致法環的拆招時間會比隻狼還要久一點。</p><p>不過法環我覺得另一個成功的地方也是在他選擇的多樣性，在這樣的多樣性下，我覺得他的難度設計其實挺棒的。</p><p>只想探索世界的人，打王可以用骨灰輾過去；<br>想挑戰自己的人，可以裸裝去挑戰王，保證死到你媽都不認得你。</p><p>你可以升級，也可以不升級。升級打王就比較簡單，不升級就相當於用困難模式去挑王。</p><p>法環的開放世界自由，在難度選擇上也是自由。我覺得這是它另一個成功的地方。<br><br /></p><p>如果你有懼於魂系的難度的話，我覺得法環是一個不錯的開始；如果是想挑戰困難的話，法環也是可以滿足你。</p><p>總體來說，法環是一個相當值得推薦的遊戲。<br><br /></p><p>不多說了，我要繼續去成為艾爾登之王了！</p>]]></content>
    
    
    
    <tags>
      
      <tag>diary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何查看 K8S 的 Job Log</title>
    <link href="/2022/03/27/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B-K8S-%E7%9A%84-Job-Log/"/>
    <url>/2022/03/27/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B-K8S-%E7%9A%84-Job-Log/</url>
    
    <content type="html"><![CDATA[<p>攝影師：<a href="https://www.pexels.com/zh-tw/@ruca-souza-32753?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels">Ruca Souza</a>，連結：<a href="https://www.pexels.com/zh-tw/photo/1049764/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels">Pexels</a></p><hr /><p>最近有個需求，要在 kubernetes 的 Job 上面查錯。</p><p>問題是 Job 不是 pod，沒有辦法用 <code>kubectl logs</code> 來看 log 記錄，該怎麼做才好呢？</p><span id="more"></span><p>在網路上查了作法，在此記錄一下。<br><br /></p><p>下指令：<code>$ kubectl describe jobs $JOB</code></p><p>在 job 的 Event 項目底下會有 job 開出來的 pod 名稱。</p><p>再下指令 <code>$ kubectl logs $POD</code>，就可以看到 job 相關的 log 了。</p><p>但是如果超過 <code>activeDeadlineSeconds</code> 的時間的話，pod 也會被砍掉，就沒辦法再看 log 了。<br><br /></p><p>最近忙著在交界地上大殺特殺……喔，對了，這個大殺特殺的受詞是我 (☍﹏⁰)</p><p>有空的話應該會寫一篇談談我對艾爾登法環的看法 (挖坑</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac 更新至 Monterey 後，觸控板無法使用</title>
    <link href="/2022/02/19/Mac-%E6%9B%B4%E6%96%B0%E8%87%B3-Monterey-%E5%BE%8C%EF%BC%8C%E8%A7%B8%E6%8E%A7%E6%9D%BF%E7%84%A1%E6%B3%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/02/19/Mac-%E6%9B%B4%E6%96%B0%E8%87%B3-Monterey-%E5%BE%8C%EF%BC%8C%E8%A7%B8%E6%8E%A7%E6%9D%BF%E7%84%A1%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Mac-更新至-Monterey-後，觸控板無法使用"><a href="#Mac-更新至-Monterey-後，觸控板無法使用" class="headerlink" title="Mac 更新至 Monterey 後，觸控板無法使用"></a>Mac 更新至 Monterey 後，觸控板無法使用</h1><p>這次過年照例帶著我的 Mac 回老家，想說過年就靠這一台了。</p><p>大年初一，Mac 跳了通知出來要我更新，我想了想又沒有壞處，就更新下去了。(´_ゝ&#96;)</p><span id="more"></span><br/><p>誰知道，更新完之後，MAC 的游標竟然就不會動了！<br>哪呢！？今天才禮拜一耶！我還有好幾天的假期要靠這台耶！<br>APPLE 的更新什麼時候變這麼爛了！</p><p>我氣急敗壞，本來想用時光機還原，結果發現我沒有時光機的備份……<br>◢▆▅▄▃崩╰(〒皿〒)╯潰▃▄▅▇◣</p><p>所以說啊…備份真的是很重要啊……<br><br/></p><p>重新安裝 MAC OS 的選項也變成了安裝 MENTOEREY，完全沒有幫助啊！！</p><p>這個時候靈光一閃想到外接滑鼠說不定是有用的？<br>跑到了樓下跟堂弟借了一個滑鼠來試看看，結果還真的有用！<br>ヽ(✿ﾟ▽ﾟ)ノ</p><p>還好找到一個方法可以操控 Mac，就算沒有觸控板不習慣，至少不會完全沒辦法控制。<br><br/></p><p>不過為什麼觸控板會失效呢？ಠ_ಠ<br>登入前的畫面觸控板是有作用的，登入後，不管我怎麼狂滑，觸控板就是不理我……<br>既然登入前可以用，這就表示壞的應該不是觸控板，可能是更新的時候動到什麼設定了？</p><p>開始拜估狗大神，後來估到一篇，忘記下什麼關鍵字，現在找不到了。(´_ゝ&#96;)<br>有夠難估，好像有其它觸控板的災情。</p><p>它是說要去設定裡勾選掉外接滑鼠，我也不知道為什麼更新之後會勾到這個。╮(╯_╰)╭<br><img src="https://lh3.googleusercontent.com/pw/AM-JKLWwvIQJelHAauZuzVJzfhAybonRH9BkR2n2BaBZZU8KuwU0PDCTQ2zH9cRJVeJRyhPtiI5UH3I3ChFuvAVEuWU7KTBeByO6UpejwbO_9W0Hi2OeOs1vBUN0jKmKfzZyWrAcdPTmr6gup-b2VuV6vyY2Hg=w1336-h980-no?authuser=0" width="50%" height="50%"></p><p>到這裡終於解決這個問題，可以繼續我開心的年假了～</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Troubleshooting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>過年目標檢視</title>
    <link href="/2022/02/13/%E9%81%8E%E5%B9%B4%E7%9B%AE%E6%A8%99%E6%AA%A2%E8%A6%96/"/>
    <url>/2022/02/13/%E9%81%8E%E5%B9%B4%E7%9B%AE%E6%A8%99%E6%AA%A2%E8%A6%96/</url>
    
    <content type="html"><![CDATA[<h1 id="過年目標檢視"><a href="#過年目標檢視" class="headerlink" title="過年目標檢視"></a>過年目標檢視</h1><p>每年放假都糊裡糊塗地就過去了，今年在假期前立了一些目標，現在年假都已經放完了，就來檢視一下這些目標完成的怎麼樣吧！</p><span id="more"></span><h1 id="研究-NFT"><a href="#研究-NFT" class="headerlink" title="研究 NFT"></a>研究 NFT</h1><p>最近 NFT 實在夯，好像碰到一點邊都可以發大財的感覺。<br>小弟不才我也想搭上這班順風車，趁著過年好好的來研究一下 NFT 到底是什麼。</p><p>其實之前就聽過這個東西，只是那時候沒啥興趣而已。<br>參考了市場先生的部落格，辦了一個幣安的帳號，可是看著琳琅滿目的 NFT，真的不知道從何下手( ˘•ω•˘ )</p><p>不過這樣看下來，感覺 NFT 已經飽和了啊？ 大家都在出 NFT，我買了別人也不一定肯花這個價錢買啊？ 不會挑的話，就是去當韭菜而已吧。<br>這不就是一個更花悄的賭場嗎？ ಠ_ಠ</p><p>然後心中就冒出了 NFT 真的有那個價值嗎？<br>想起投資的法則──不要輕易買入你不知道的東西。<br>所以最後還是什麼都沒買，可能還要再更深入研究一下，看要怎麼挑吧？</p><h1 id="設定-hexo-部落格"><a href="#設定-hexo-部落格" class="headerlink" title="設定 hexo 部落格"></a>設定 hexo 部落格</h1><p>這大概是這個過年完成度最高的一個目標了。<br>其實這個 hexo 已經開很久了，只是一直都沒在發文而已，我也已經忘記到底是什麼時候開的了。<br>看著github 的記錄是 2020&#x2F;03&#x2F;20，然後就想真的有這麼久喔 ∑(￣□￣;)</p><p>這次不知道哪個筋不對，決定重新好好的整理這個 blog，我自己也不知道可以持續多久科科。</p><p>參考了這篇 <a href="https://www.larrynote.com/website-service/30/">Hexo + Github Pages：教你設定部落格的專屬網址，含網域購買教學</a>。<br>照著教學去 google domain 買了一個網址，其實也不貴，一年才三百多塊，真不知道以前在猶豫什麼。</p><p>不過我教學還沒有做到最後，感覺就可以轉址了。不想去測試到底做到哪個步驟就可以了，或者是有什麼差別，反正目前可以用就好了。</p><h1 id="寫完-Request-amp-Axios-上傳"><a href="#寫完-Request-amp-Axios-上傳" class="headerlink" title="寫完 Request &amp; Axios 上傳"></a>寫完 Request &amp; Axios 上傳</h1><p>既然設定完 blog 了，總是要寫篇文章上傳吧 ლ(╹◡╹ლ)<br>就寫了一篇之前 Debug 的東西，想說或許可以幫到一些人。<br>之後預計可能一個禮拜會發一篇吧，看心情發文。</p><h1 id="Hahow-金融課"><a href="#Hahow-金融課" class="headerlink" title="Hahow 金融課"></a>Hahow 金融課</h1><p>本來想要過年加入發大財的行列的……看完這個看能不能提升自己選股的能力。<br>買了到現在不知道過多久了還沒看完 ( ´•̥̥̥ω•̥̥̥&#96; )</p><p>這次過年這個目標也是失敗惹～</p><h1 id="Google-study-jam"><a href="#Google-study-jam" class="headerlink" title="Google study jam"></a>Google study jam</h1><p>年前興致勃勃的參加 <a href="https://events.withgoogle.com/taiwan-cloud-study-jam/">Google study jam</a>，想說過年可以好好的來做這個，不過一回過神來，年假已經過了一半了。</p><p>◢▆▅▄▃崩╰(〒皿〒)╯潰▃▄▅▇◣</p><p>本來還想的很好，一天解決一個 event，解決個鬼……<br>高估我的意志力了(´・ω・&#96;)</p><h1 id="回顧"><a href="#回顧" class="headerlink" title="回顧"></a>回顧</h1><p>這個年假達成的目標其實比起以往，我覺得算是挺不錯的了。<br>以前放假就是混混噩噩的過完了，目標都下的很粗淺，比方說像是要看完什麼書這樣。<br>這次實際把目標列出來，就比較有完成了某件事情的感覺。</p><p>真的花了錢買網址下去作部落格之後，就覺得一切正式了起來。<br>之前單純架在 github 上，都沒什麼動力寫的感覺，就看看這次可以持續多久吧。</p><p>這次年假也載了 slay the spire 下來，殺戮之塔真的很適合在手機啊 (<em>´▽&#96;</em>)<br>我這個年假的遊戲就是靠這個了，雖然我 steam 上也有買，不過瘋了一陣子之後又停了，這個感覺也有很多技巧可以研究。</p><p>新的一年也要好好加油了！(ง๑ •̀_•́)ง</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Diary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Axios 替換 Request 上傳檔案</title>
    <link href="/2022/02/06/Axios-%E6%9B%BF%E6%8F%9B-Request-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88/"/>
    <url>/2022/02/06/Axios-%E6%9B%BF%E6%8F%9B-Request-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Axios-替換-Request-上傳檔案"><a href="#Axios-替換-Request-上傳檔案" class="headerlink" title="Axios 替換 Request 上傳檔案"></a>Axios 替換 Request 上傳檔案</h1><p>最近因為 nodejs 的 <a href="https://www.npmjs.com/package/request">request library</a> 在 2020 年 2 月 的時候完全的 deprecated，進入了維護狀態，而且不會再有新的功能出現。<br>再加上目前的專案混雜了 request 及 <a href="https://www.npmjs.com/package/axios">axios</a> 兩種功能相近的 library，所以興起了全面用 axios 替換掉 request 的念頭。</p><p>本來以為是滿單純的替換，不過還是撞到了一些問題……( ˘･з･)</p><h2 id="阿伯～初四啦！阿伯！"><a href="#阿伯～初四啦！阿伯！" class="headerlink" title="阿伯～初四啦！阿伯！"></a>阿伯～初四啦！阿伯！</h2><p>我們原本有一個功能是使用 request 來進行上傳檔案的動作，原始碼大致如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;request&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">uploadFile</span>(<span class="hljs-params">req</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; headers &#125; = req;<br>  <span class="hljs-keyword">const</span> filePath = <span class="hljs-string">&quot;/location/file.txt&quot;</span><br>  <span class="hljs-keyword">const</span> options = &#123;<br>    <span class="hljs-attr">constmethod</span>: <span class="hljs-string">&#x27;PUT&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://ip:port/api/v2/upload/file/&#x27;</span>,<br>    header,<br>    <span class="hljs-attr">json</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">formData</span>: &#123;<br>      <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">value</span>: fs.<span class="hljs-title function_">createReadStream</span>(filePath),<br>        <span class="hljs-attr">options</span>: &#123; <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;file.txt&#x27;</span> &#125;,<br>      &#125;<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-title function_">request</span>(options, <span class="hljs-function">(<span class="hljs-params">err, httpRes, body</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// do something</span><br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>在網路上查了一下 axios 怎麼做上傳之後，使用 <a href="https://www.npmjs.com/package/form-data">form-data</a> 輔助，改寫成如下的程式碼：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">FormData</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;form-data&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">uploadfile</span>(<span class="hljs-params">req</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; headers &#125; = req;<br>  <span class="hljs-keyword">const</span> filePath = <span class="hljs-string">&quot;/location/file.txt&quot;</span><br><br>  <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br>  formData.<span class="hljs-title function_">append</span>(<br>    <span class="hljs-string">&#x27;data&#x27;</span>,<br>    fs.<span class="hljs-title function_">createReadStream</span>(filePath),<br>    &#123; <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;file.txt&#x27;</span> &#125;,<br>  );<br><br>  <span class="hljs-keyword">const</span> options = &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;PUT&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://ip:port/api/v2/upload/file/&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: formData.<span class="hljs-title function_">getHeaders</span>(),<br>    <span class="hljs-attr">data</span>: formData,<br>  &#125;;<br><br>  axios.<span class="hljs-title function_">request</span>(options)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res); &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123; <span class="hljs-keyword">throw</span> err; &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>測試之後，發現 server 會回傳 400 Bad request。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">response<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  status<span class="hljs-punctuation">:</span> <span class="hljs-number">400</span><span class="hljs-punctuation">,</span><br>  statusText<span class="hljs-punctuation">:</span> &#x27;Bad Request&#x27;<span class="hljs-punctuation">,</span><br>  ...<br>  data<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> detail<span class="hljs-punctuation">:</span> `<span class="hljs-number">40000</span><span class="hljs-punctuation">:</span> Failed to upload file<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#x27;data&#x27;&quot;</span>` <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="問題在哪兒？"><a href="#問題在哪兒？" class="headerlink" title="問題在哪兒？"></a>問題在哪兒？</h2><p>既然 request 可以上傳的話，那麼問題應該是出在 axios 少了什麼東西才對。 ( • ̀ω•́ )</p><p>由錯誤訊息判斷，覺得可能是 form data 的問題，於是開始嘗試了各種改寫，不過結果都差不多。 (〒︿〒)</p><p>只好去比對用 request 打 api 跟 axios 打 api 到底有什麼差異。<br>比對之後發現 axios 少了 content-length (其實不只少 content-length，不過測試後發現這個才是原因)。</p><p>可是為什麼 request 會自動幫我們加上 content-length 呢？<br>如果 axios 不會自動加上這個 header 的話，網路上的範例應該都會註明到這點才對啊？</p><p>感覺有些貓膩在裡面。 ಠ_ಠ </p><h2 id="真相只有一個！"><a href="#真相只有一個！" class="headerlink" title="真相只有一個！"></a>真相只有一個！</h2><p>去追查之後發現 request 與 axios 添加 content-length 的判斷邏輯不一樣。</p><p>簡單來說 axios 判斷如果 data 類型不是 stream 的話，才會去加上 content-length header。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (data &amp;&amp; !utils.<span class="hljs-title function_">isStream</span>(data)) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">isBuffer</span>(data)) &#123;<br>    <span class="hljs-comment">// Nothing to do...</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (utils.<span class="hljs-title function_">isArrayBuffer</span>(data)) &#123;<br>    data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(data));<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (utils.<span class="hljs-title function_">isString</span>(data)) &#123;<br>    data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>(data, <span class="hljs-string">&#x27;utf-8&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-title function_">createError</span>(<br>      <span class="hljs-string">&#x27;Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream&#x27;</span>,<br>      config<br>    ));<br>  &#125;<br><br>  <span class="hljs-comment">// Add Content-Length header if data exists</span><br>  headers[<span class="hljs-string">&#x27;Content-Length&#x27;</span>] = data.<span class="hljs-property">length</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>因為我們一開始改寫的 formData 會被 axios 判定為 stream 類型，自然就沒有 content-length。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">FormData</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;form-data&#x27;</span>);<br><br><span class="hljs-keyword">const</span> filePath = <span class="hljs-string">&#x27;./test.txt&#x27;</span>;<br><span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br>formData.<span class="hljs-title function_">append</span>(<br>  <span class="hljs-string">&#x27;data&#x27;</span>,<br>  fs.<span class="hljs-title function_">createReadStream</span>(filePath),<br>  &#123; <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;file.txt&#x27;</span> &#125;,<br>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isObject</span>(<span class="hljs-params">val</span>) &#123;<br>  <span class="hljs-keyword">return</span> val !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&#x27;object&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isFunction</span>(<span class="hljs-params">val</span>) &#123;<br>  <span class="hljs-keyword">return</span> toString.<span class="hljs-title function_">call</span>(val) === <span class="hljs-string">&#x27;[object Function]&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isStream</span>(<span class="hljs-params">val</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">isObject</span>(val) &amp;&amp; <span class="hljs-title function_">isFunction</span>(val.<span class="hljs-property">pipe</span>);<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;formData is stream: &#x27;</span>, <span class="hljs-title function_">isStream</span>(formData));<br><span class="hljs-comment">// formData is stream:  true</span><br></code></pre></td></tr></table></figure><p>那麼問題來了，request 又是怎麼做 content-length 的判斷呢？</p><p>request 如果判斷資料有 formData 但沒有帶 content-length header 的話，會使用 getLength 這個函式來取得 length。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (self.<span class="hljs-property">_form</span> &amp;&amp; !self.<span class="hljs-title function_">hasHeader</span>(<span class="hljs-string">&#x27;content-length&#x27;</span>)) &#123;<br>  <span class="hljs-comment">// Before ending the request, we had to compute the length of the whole form, asyncly</span><br>  self.<span class="hljs-title function_">setHeader</span>(self.<span class="hljs-property">_form</span>.<span class="hljs-title function_">getHeaders</span>(), <span class="hljs-literal">true</span>)<br>  self.<span class="hljs-property">_form</span>.<span class="hljs-title function_">getLength</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">err, length</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!err &amp;&amp; !<span class="hljs-built_in">isNaN</span>(length)) &#123;<br>      self.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;content-length&#x27;</span>, length)<br>    &#125;<br>    <span class="hljs-title function_">end</span>()<br>  &#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-title function_">end</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>getLength 剛好就是 form-data 所提供的函式，意外發現 request 內部也是使用 form-data 去處理 FormData 的資料。</p><p>到這邊再度改寫 axios 的程式加上 content-length，終於可以成功上傳檔案了！<br>ヽ( ° ▽°)ノ</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">FormData</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;form-data&#x27;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getLen</span> = (<span class="hljs-params">formData</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    formData.<span class="hljs-title function_">getLength</span>(<span class="hljs-function">(<span class="hljs-params">err, len</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!err &amp;&amp; !<span class="hljs-built_in">isNaN</span>(len)) &#123; <span class="hljs-title function_">resolve</span>(len); &#125;<br>      <span class="hljs-keyword">else</span> &#123; <span class="hljs-title function_">reject</span>(err); &#125;<br>    &#125;);<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">uploadSolution</span>(<span class="hljs-params">req</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; headers &#125; = req;<br>  <span class="hljs-keyword">const</span> filePath = <span class="hljs-string">&quot;/location/file.txt&quot;</span><br>  <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br>  formData.<span class="hljs-title function_">append</span>(<br>    <span class="hljs-string">&#x27;data&#x27;</span>,<br>    fs.<span class="hljs-title function_">createReadStream</span>(filePath),<br>    &#123; <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;gmn_container.gsp&#x27;</span> &#125;,<br>  );<br>  <span class="hljs-keyword">const</span> contentLen = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getLen</span>(formData);<br><br>  <span class="hljs-keyword">const</span> config = &#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://10.112.1.3:31215/&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;x-api-host&#x27;</span>: <span class="hljs-string">&#x27;goc&#x27;</span>,<br>      <span class="hljs-string">&#x27;x-api-key&#x27;</span>: <span class="hljs-string">&#x27;129ce429-a861-42b7-9929-a6a88a4dcf04&#x27;</span>,<br>    &#125;,<br><br>    <span class="hljs-attr">auth</span>: &#123;<br>      <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>      <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>    &#125;,<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> options = &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://ip:port/api/v2/upload/file/&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;PUT&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      ...header,<br>      ...formData.<span class="hljs-title function_">getHeaders</span>(),<br>      <span class="hljs-string">&#x27;content-length&#x27;</span>: contentLen,<br>    &#125;,<br>    <span class="hljs-attr">data</span>: formData,<br>  &#125;;<br><br>  axios.<span class="hljs-title function_">request</span>(options)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res); &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123; <span class="hljs-keyword">throw</span> err; &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><br/>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>Program</category>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Troubleshooting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript - 為什麼 Error 是空物件？</title>
    <link href="/2021/07/17/Javascript-Print-Error/"/>
    <url>/2021/07/17/Javascript-Print-Error/</url>
    
    <content type="html"><![CDATA[<h1 id="Javascript-為什麼-Error-是空物件？"><a href="#Javascript-為什麼-Error-是空物件？" class="headerlink" title="Javascript - 為什麼 Error 是空物件？"></a>Javascript - 為什麼 Error 是空物件？</h1><p>在研究 Async.js waterfall 的時候，感覺像被 javascript 給陰到了一樣</p><p>考慮下列的程式碼</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Async</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;async&#x27;</span>);<br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.google.com&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;function 1:&#x27;</span>, res.<span class="hljs-property">status</span>, res.<span class="hljs-property">statusText</span>);<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-property">status</span>;<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;阿伯～出事了！阿伯！&#x27;</span>, error);<br>      <span class="hljs-keyword">throw</span> error;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">status, callback</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;function 2:&#x27;</span>, status);<br>  <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, status);<br>&#125;<br><br><span class="hljs-title class_">Async</span>.<span class="hljs-title function_">waterfall</span>([<br>  func1,<br>  func2,<br>], <span class="hljs-function">(<span class="hljs-params">error, result</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (error) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;result: &#x27;</span>, result);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>沒發生錯誤時會輸出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">function</span> <span class="hljs-number">1</span>: <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">function</span> <span class="hljs-number">2</span>: <span class="hljs-number">200</span><br><span class="hljs-attribute">result</span>:  <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><p>但只要丟出一個錯誤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;function 1:&#x27;</span>, res.<span class="hljs-property">status</span>, res.<span class="hljs-property">statusText</span>);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Test error&quot;</span>;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-property">status</span>;<br>    &#125;)<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>碰！</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> <span class="hljs-number">1</span>: <span class="hljs-number">200</span> OK<br>阿伯～出事了！阿伯！ Test error<br>Error: Test error<br>    at <span class="hljs-regexp">/Users/</span>hao<span class="hljs-regexp">/Projects/</span>nchc<span class="hljs-regexp">/xportal/</span>backend<span class="hljs-regexp">/node_modules/</span>async<span class="hljs-regexp">/dist/</span>async.js:<span class="hljs-number">173</span>:<span class="hljs-number">65</span><br>    at processTicksAndRejections (internal<span class="hljs-regexp">/process/</span>task_queues.js:<span class="hljs-number">93</span>:<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>asyncjs 會先拋出一個奇怪的錯誤，如果先去 google 的話，會覺得這個錯誤好像是 unhandledRejection 的問題</p><p>所以我開始找程式碼裡到底有哪裡沒加到，然後全部加過一輪後，一樣爆炸</p><p>證明這個思路不對，我開始嚐試走別條路</p><p>因為錯誤是 waterfall print error 的時候出現</p><p>我一度以為是 aysnc function 跟 非async function 不能這樣混用，又測試了多種寫法</p><p>結果也通通爆炸，呀哈哈哈～   ( σ ﾟ∀ ﾟ) ﾟ∀ﾟ)σ<br><br/></p><p>最後試著用別的方式印出 error</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Async</span>.<span class="hljs-title function_">waterfall</span>([<br>  func1,<br>  func2,<br>], <span class="hljs-function">(<span class="hljs-params">error, result</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (error) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(error))<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;result: &#x27;</span>, result);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>喔喔！事情終於有了進展，錯誤沒有跑出來了！</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">1:</span> 200 OK<br>阿伯～出事了！阿伯！ Test error<br>&#123;&#125;<br></code></pre></td></tr></table></figure><p>可是為什麼是空物件呢…？<br>又經歷了各種嚐試，之後突然想到一件事情<br>我一直以為是 asyncjs 的寫法錯誤，才會造成 throw 出來的 error 接不到<br>可是如果是 javascript 的 error 本來就印不出來呢？</p><p>從這個思路終於找到問題，不是 asyncjs 不能 async 跟 非async 混用，而是 <strong>你沒辦法用 JSON.stringify() 去顯示 Javascript 的 Error 型態</strong></p><p><a href="https://stackoverflow.com/questions/38513493/why-are-my-js-promise-catch-error-objects-empty">Why are my JS promise catch error objects empty?</a><br><a href="https://stackoverflow.com/questions/18391212/is-it-not-possible-to-stringify-an-error-using-json-stringify">Is it not possible to stringify an Error using JSON.stringify?</a></p><p>主要的原因在於 asyncjs 的 waterfall 在接到 throw error 的時候，會把它包裝成 error 的型態，在 callback 的時候當然沒辦法直接印出來</p><p>比較簡單解決的方法是去存取 error 的 message</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-title class_">Async</span>.<span class="hljs-title function_">waterfall</span>([<br>  func1,<br>  func2,<br>], <span class="hljs-function">(<span class="hljs-params">error, result</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (error) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error.<span class="hljs-property">message</span>)<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;result: &#x27;</span>, result);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">function 1: 200 OK<br>阿伯～出事了！阿伯！ Test error<br><span class="hljs-keyword">Test </span>error<br></code></pre></td></tr></table></figure><p>為了這種初學者的問題卡了半天，學藝不精，真是慚愧 ( ´•̥̥̥ω•̥̥̥&#96; )</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>Program</category>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Troubleshooting</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
