<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>過年目標檢視</title>
    <link href="/2022/02/13/%E9%81%8E%E5%B9%B4%E7%9B%AE%E6%A8%99%E6%AA%A2%E8%A6%96/"/>
    <url>/2022/02/13/%E9%81%8E%E5%B9%B4%E7%9B%AE%E6%A8%99%E6%AA%A2%E8%A6%96/</url>
    
    <content type="html"><![CDATA[<h1 id="過年目標檢視"><a href="#過年目標檢視" class="headerlink" title="過年目標檢視"></a>過年目標檢視</h1><p>每年放假都糊裡糊塗地就過去了，今年在假期前立了一些目標，現在年假都已經放完了，就來檢視一下這些目標完成的怎麼樣吧！</p><span id="more"></span><h1 id="研究-NFT"><a href="#研究-NFT" class="headerlink" title="研究 NFT"></a>研究 NFT</h1><p>最近 NFT 實在夯，好像碰到一點邊都可以發大財的感覺。<br>小弟不才我也想搭上這班順風車，趁著過年好好的來研究一下 NFT 到底是什麼。</p><p>其實之前就聽過這個東西，只是那時候沒啥興趣而已。<br>參考了市場先生的部落格，辦了一個幣安的帳號，可是看著琳琅滿目的 NFT，真的不知道從何下手( ˘•ω•˘ )</p><p>不過這樣看下來，感覺 NFT 已經飽和了啊？ 大家都在出 NFT，我買了別人也不一定肯花這個價錢買啊？ 不會挑的話，就是去當韭菜而已吧。<br>這不就是一個更花悄的賭場嗎？ ಠ_ಠ</p><p>然後心中就冒出了 NFT 真的有那個價值嗎？<br>想起投資的法則──不要輕易買入你不知道的東西。<br>所以最後還是什麼都沒買，可能還要再更深入研究一下，看要怎麼挑吧？</p><h1 id="設定-hexo-部落格"><a href="#設定-hexo-部落格" class="headerlink" title="設定 hexo 部落格"></a>設定 hexo 部落格</h1><p>這大概是這個過年完成度最高的一個目標了。<br>其實這個 hexo 已經開很久了，只是一直都沒在發文而已，我也已經忘記到底是什麼時候開的了。<br>看著github 的記錄是 2020/03/20，然後就想真的有這麼久喔 ∑(￣□￣;)</p><p>這次不知道哪個筋不對，決定重新好好的整理這個 blog，我自己也不知道可以持續多久科科。</p><p>參考了這篇 <a href="https://www.larrynote.com/website-service/30/">Hexo + Github Pages：教你設定部落格的專屬網址，含網域購買教學</a>。<br>照著教學去 google domain 買了一個網址，其實也不貴，一年才三百多塊，真不知道以前在猶豫什麼。</p><p>不過我教學還沒有做到最後，感覺就可以轉址了。不想去測試到底做到哪個步驟就可以了，或者是有什麼差別，反正目前可以用就好了。</p><h1 id="寫完-Request-amp-Axios-上傳"><a href="#寫完-Request-amp-Axios-上傳" class="headerlink" title="寫完 Request &amp; Axios 上傳"></a>寫完 Request &amp; Axios 上傳</h1><p>既然設定完 blog 了，總是要寫篇文章上傳吧 ლ(╹◡╹ლ)<br>就寫了一篇之前 Debug 的東西，想說或許可以幫到一些人。<br>之後預計可能一個禮拜會發一篇吧，看心情發文。</p><h1 id="Hahow-金融課"><a href="#Hahow-金融課" class="headerlink" title="Hahow 金融課"></a>Hahow 金融課</h1><p>本來想要過年加入發大財的行列的……看完這個看能不能提升自己選股的能力。<br>買了到現在不知道過多久了還沒看完 ( ´•̥̥̥ω•̥̥̥` )</p><p>這次過年這個目標也是失敗惹～</p><h1 id="Google-study-jam"><a href="#Google-study-jam" class="headerlink" title="Google study jam"></a>Google study jam</h1><p>年前興致勃勃的參加 <a href="https://events.withgoogle.com/taiwan-cloud-study-jam/">Google study jam</a>，想說過年可以好好的來做這個，不過一回過神來，年假已經過了一半了。</p><p>◢▆▅▄▃崩╰(〒皿〒)╯潰▃▄▅▇◣</p><p>本來還想的很好，一天解決一個 event，解決個鬼……<br>高估我的意志力了(´・ω・`)</p><h1 id="回顧"><a href="#回顧" class="headerlink" title="回顧"></a>回顧</h1><p>這個年假達成的目標其實比起以往，我覺得算是挺不錯的了。<br>以前放假就是混混噩噩的過完了，目標都下的很粗淺，比方說像是要看完什麼書這樣。<br>這次實際把目標列出來，就比較有完成了某件事情的感覺。</p><p>真的花了錢買網址下去作部落格之後，就覺得一切正式了起來。<br>之前單純架在 github 上，都沒什麼動力寫的感覺，就看看這次可以持續多久吧。</p><p>這次年假也載了 slay the spire 下來，殺戮之塔真的很適合在手機啊 (<em>´▽`</em>)<br>我這個年假的遊戲就是靠這個了，雖然我 steam 上也有買，不過瘋了一陣子之後又停了，這個感覺也有很多技巧可以研究。</p><p>新的一年也要好好加油了！(ง๑ •̀_•́)ง</p>]]></content>
    
    
    
    <tags>
      
      <tag>Diary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Axios 替換 Request 上傳檔案</title>
    <link href="/2022/02/06/Axios-%E6%9B%BF%E6%8F%9B-Request-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88/"/>
    <url>/2022/02/06/Axios-%E6%9B%BF%E6%8F%9B-Request-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Axios-替換-Request-上傳檔案"><a href="#Axios-替換-Request-上傳檔案" class="headerlink" title="Axios 替換 Request 上傳檔案"></a>Axios 替換 Request 上傳檔案</h1><p>最近因為 nodejs 的 <a href="https://www.npmjs.com/package/request">request library</a> 在 2020 年 2 月 的時候完全的 deprecated，進入了維護狀態，而且不會再有新的功能出現。<br>再加上目前的專案混雜了 request 及 <a href="https://www.npmjs.com/package/axios">axios</a> 兩種功能相近的 library，所以興起了全面用 axios 替換掉 request 的念頭。</p><p>本來以為是滿單純的替換，不過還是撞到了一些問題……( ˘･з･)</p><h2 id="阿伯～初四啦！阿伯！"><a href="#阿伯～初四啦！阿伯！" class="headerlink" title="阿伯～初四啦！阿伯！"></a>阿伯～初四啦！阿伯！</h2><p>我們原本有一個功能是使用 request 來進行上傳檔案的動作，原始碼大致如下：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;request&#x27;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadFile</span>(<span class="hljs-params">req</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> &#123; headers &#125; = req;<br>  <span class="hljs-keyword">const</span> filePath = <span class="hljs-string">&quot;/location/file.txt&quot;</span><br>  <span class="hljs-keyword">const</span> options = &#123;<br>    <span class="hljs-attr">constmethod</span>: <span class="hljs-string">&#x27;PUT&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://ip:port/api/v2/upload/file/&#x27;</span>,<br>    header,<br>    <span class="hljs-attr">json</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">formData</span>: &#123;<br>      <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">value</span>: fs.createReadStream(filePath),<br>        <span class="hljs-attr">options</span>: &#123; <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;file.txt&#x27;</span> &#125;,<br>      &#125;<br>    &#125;<br>  &#125;;<br><br>  request(options, <span class="hljs-function">(<span class="hljs-params">err, httpRes, body</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// do something</span><br>  &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在網路上查了一下 axios 怎麼做上傳之後，使用 <a href="https://www.npmjs.com/package/form-data">form-data</a> 輔助，改寫成如下的程式碼：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><span class="hljs-keyword">const</span> FormData = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;form-data&#x27;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadfile</span>(<span class="hljs-params">req</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> &#123; headers &#125; = req;<br>  <span class="hljs-keyword">const</span> filePath = <span class="hljs-string">&quot;/location/file.txt&quot;</span><br><br>  <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> FormData();<br>  formData.append(<br>    <span class="hljs-string">&#x27;data&#x27;</span>,<br>    fs.createReadStream(filePath),<br>    &#123; <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;file.txt&#x27;</span> &#125;,<br>  );<br><br>  <span class="hljs-keyword">const</span> options = &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;PUT&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://ip:port/api/v2/upload/file/&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: formData.getHeaders(),<br>    <span class="hljs-attr">data</span>: formData,<br>  &#125;;<br><br>  axios.request(options)<br>    .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(res); &#125;)<br>    .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123; <span class="hljs-keyword">throw</span> err; &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>測試之後，發現 server 會回傳 400 Bad request。</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">response: &#123;<br>  status: <span class="hljs-number">400</span>,<br>  statusText: &#x27;Bad Request&#x27;,<br>  ...<br>  data: &#123; detail: `<span class="hljs-number">40000</span>: Failed to upload file: <span class="hljs-string">&quot;&#x27;data&#x27;&quot;</span>` &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="問題在哪兒？"><a href="#問題在哪兒？" class="headerlink" title="問題在哪兒？"></a>問題在哪兒？</h2><p>既然 request 可以上傳的話，那麼問題應該是出在 axios 少了什麼東西才對。 ( • ̀ω•́ )</p><p>由錯誤訊息判斷，覺得可能是 form data 的問題，於是開始嘗試了各種改寫，不過結果都差不多。 (〒︿〒)</p><p>只好去比對用 request 打 api 跟 axios 打 api 到底有什麼差異。<br>比對之後發現 axios 少了 content-length (其實不只少 content-length，不過測試後發現這個才是原因)。</p><p>可是為什麼 request 會自動幫我們加上 content-length 呢？<br>如果 axios 不會自動加上這個 header 的話，網路上的範例應該都會註明到這點才對啊？</p><p>感覺有些貓膩在裡面。 ಠ_ಠ </p><h2 id="真相只有一個！"><a href="#真相只有一個！" class="headerlink" title="真相只有一個！"></a>真相只有一個！</h2><p>去追查之後發現 request 與 axios 添加 content-length 的判斷邏輯不一樣。</p><p>簡單來說 axios 判斷如果 data 類型不是 stream 的話，才會去加上 content-length header。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (data &amp;&amp; !utils.isStream(data)) &#123;<br>  <span class="hljs-keyword">if</span> (Buffer.isBuffer(data)) &#123;<br>    <span class="hljs-comment">// Nothing to do...</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (utils.isArrayBuffer(data)) &#123;<br>    data = <span class="hljs-keyword">new</span> Buffer(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(data));<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (utils.isString(data)) &#123;<br>    data = <span class="hljs-keyword">new</span> Buffer(data, <span class="hljs-string">&#x27;utf-8&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> reject(createError(<br>      <span class="hljs-string">&#x27;Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream&#x27;</span>,<br>      config<br>    ));<br>  &#125;<br><br>  <span class="hljs-comment">// Add Content-Length header if data exists</span><br>  headers[<span class="hljs-string">&#x27;Content-Length&#x27;</span>] = data.length;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>因為我們一開始改寫的 formData 會被 axios 判定為 stream 類型，自然就沒有 content-length。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> FormData = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;form-data&#x27;</span>);<br><br><span class="hljs-keyword">const</span> filePath = <span class="hljs-string">&#x27;./test.txt&#x27;</span>;<br><span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> FormData();<br>formData.append(<br>  <span class="hljs-string">&#x27;data&#x27;</span>,<br>  fs.createReadStream(filePath),<br>  &#123; <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;file.txt&#x27;</span> &#125;,<br>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isObject</span>(<span class="hljs-params">val</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> val !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&#x27;object&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isFunction</span>(<span class="hljs-params">val</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> toString.call(val) === <span class="hljs-string">&#x27;[object Function]&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isStream</span>(<span class="hljs-params">val</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> isObject(val) &amp;&amp; isFunction(val.pipe);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;formData is stream: &#x27;</span>, isStream(formData));<br><span class="hljs-comment">// formData is stream:  true</span><br></code></pre></div></td></tr></table></figure><p>那麼問題來了，request 又是怎麼做 content-length 的判斷呢？</p><p>request 如果判斷資料有 formData 但沒有帶 content-length header 的話，會使用 getLength 這個函式來取得 length。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (self._form &amp;&amp; !self.hasHeader(<span class="hljs-string">&#x27;content-length&#x27;</span>)) &#123;<br>  <span class="hljs-comment">// Before ending the request, we had to compute the length of the whole form, asyncly</span><br>  self.setHeader(self._form.getHeaders(), <span class="hljs-literal">true</span>)<br>  self._form.getLength(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, length</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!err &amp;&amp; !<span class="hljs-built_in">isNaN</span>(length)) &#123;<br>      self.setHeader(<span class="hljs-string">&#x27;content-length&#x27;</span>, length)<br>    &#125;<br>    end()<br>  &#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  end()<br>&#125;<br></code></pre></div></td></tr></table></figure><p>getLength 剛好就是 form-data 所提供的函式，意外發現 request 內部也是使用 form-data 去處理 FormData 的資料。</p><p>到這邊再度改寫 axios 的程式加上 content-length，終於可以成功上傳檔案了！<br>ヽ( ° ▽°)ノ</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><span class="hljs-keyword">const</span> FormData = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;form-data&#x27;</span>);<br><br><span class="hljs-keyword">const</span> getLen = <span class="hljs-function">(<span class="hljs-params">formData</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    formData.getLength(<span class="hljs-function">(<span class="hljs-params">err, len</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!err &amp;&amp; !<span class="hljs-built_in">isNaN</span>(len)) &#123; resolve(len); &#125;<br>      <span class="hljs-keyword">else</span> &#123; reject(err); &#125;<br>    &#125;);<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadSolution</span>(<span class="hljs-params">req</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> &#123; headers &#125; = req;<br>  <span class="hljs-keyword">const</span> filePath = <span class="hljs-string">&quot;/location/file.txt&quot;</span><br>  <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> FormData();<br>  formData.append(<br>    <span class="hljs-string">&#x27;data&#x27;</span>,<br>    fs.createReadStream(filePath),<br>    &#123; <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;gmn_container.gsp&#x27;</span> &#125;,<br>  );<br>  <span class="hljs-keyword">const</span> contentLen = <span class="hljs-keyword">await</span> getLen(formData);<br><br>  <span class="hljs-keyword">const</span> config = &#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://10.112.1.3:31215/&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;x-api-host&#x27;</span>: <span class="hljs-string">&#x27;goc&#x27;</span>,<br>      <span class="hljs-string">&#x27;x-api-key&#x27;</span>: <span class="hljs-string">&#x27;129ce429-a861-42b7-9929-a6a88a4dcf04&#x27;</span>,<br>    &#125;,<br><br>    <span class="hljs-attr">auth</span>: &#123;<br>      <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>      <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>    &#125;,<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> options = &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://ip:port/api/v2/upload/file/&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;PUT&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      ...header,<br>      ...formData.getHeaders(),<br>      <span class="hljs-string">&#x27;content-length&#x27;</span>: contentLen,<br>    &#125;,<br>    <span class="hljs-attr">data</span>: formData,<br>  &#125;;<br><br>  axios.request(options)<br>    .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(res); &#125;)<br>    .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123; <span class="hljs-keyword">throw</span> err; &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure><br/>]]></content>
    
    
    
    <tags>
      
      <tag>Troubleshooting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript - 為什麼 Error 是空物件？</title>
    <link href="/2021/07/17/Javascript-Print-Error/"/>
    <url>/2021/07/17/Javascript-Print-Error/</url>
    
    <content type="html"><![CDATA[<h1 id="Javascript-為什麼-Error-是空物件？"><a href="#Javascript-為什麼-Error-是空物件？" class="headerlink" title="Javascript - 為什麼 Error 是空物件？"></a>Javascript - 為什麼 Error 是空物件？</h1><p>在研究 Async.js waterfall 的時候，感覺像被 javascript 給陰到了一樣</p><p>考慮下列的程式碼</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Async = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;async&#x27;</span>);<br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> axios(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.google.com&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  &#125;)<br>    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;function 1:&#x27;</span>, res.status, res.statusText);<br>      <span class="hljs-keyword">return</span> res.status;<br>    &#125;)<br>    .catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;阿伯～出事了！阿伯！&#x27;</span>, error);<br>      <span class="hljs-keyword">throw</span> error;<br>    &#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func2</span>(<span class="hljs-params">status, callback</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;function 2:&#x27;</span>, status);<br>  callback(<span class="hljs-literal">null</span>, status);<br>&#125;<br><br>Async.waterfall([<br>  func1,<br>  func2,<br>], <span class="hljs-function">(<span class="hljs-params">error, result</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (error) <span class="hljs-built_in">console</span>.log(error)<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;result: &#x27;</span>, result);<br>&#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>沒發生錯誤時會輸出</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">function</span> <span class="hljs-number">1</span>: <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">function</span> <span class="hljs-number">2</span>: <span class="hljs-number">200</span><br><span class="hljs-attribute">result</span>:  <span class="hljs-number">200</span><br></code></pre></div></td></tr></table></figure><p>但只要丟出一個錯誤</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;function 1:&#x27;</span>, res.status, res.statusText);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Test error&quot;</span>;<br>      <span class="hljs-keyword">return</span> res.status;<br>    &#125;)<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>碰！</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> <span class="hljs-number">1</span>: <span class="hljs-number">200</span> OK<br>阿伯～出事了！阿伯！ Test error<br>Error: Test error<br>    at <span class="hljs-regexp">/Users/</span>hao<span class="hljs-regexp">/Projects/</span>nchc<span class="hljs-regexp">/xportal/</span>backend<span class="hljs-regexp">/node_modules/</span>async<span class="hljs-regexp">/dist/</span>async.js:<span class="hljs-number">173</span>:<span class="hljs-number">65</span><br>    at processTicksAndRejections (internal<span class="hljs-regexp">/process/</span>task_queues.js:<span class="hljs-number">93</span>:<span class="hljs-number">5</span>)<br></code></pre></div></td></tr></table></figure><p>asyncjs 會先拋出一個奇怪的錯誤，如果先去 google 的話，會覺得這個錯誤好像是 unhandledRejection 的問題</p><p>所以我開始找程式碼裡到底有哪裡沒加到，然後全部加過一輪後，一樣爆炸</p><p>證明這個思路不對，我開始嚐試走別條路</p><p>因為錯誤是 waterfall print error 的時候出現</p><p>我一度以為是 aysnc function 跟 非async function 不能這樣混用，又測試了多種寫法</p><p>結果也通通爆炸，呀哈哈哈～   ( σ ﾟ∀ ﾟ) ﾟ∀ﾟ)σ<br><br/></p><p>最後試著用別的方式印出 error</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">Async.waterfall([<br>  func1,<br>  func2,<br>], <span class="hljs-function">(<span class="hljs-params">error, result</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (error) <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.stringify(error))<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;result: &#x27;</span>, result);<br>&#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>喔喔！事情終於有了進展，錯誤沒有跑出來了！</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">1:</span> 200 OK<br>阿伯～出事了！阿伯！ Test error<br>&#123;&#125;<br></code></pre></div></td></tr></table></figure><p>可是為什麼是空物件呢…？<br>又經歷了各種嚐試，之後突然想到一件事情<br>我一直以為是 asyncjs 的寫法錯誤，才會造成 throw 出來的 error 接不到<br>可是如果是 javascript 的 error 本來就印不出來呢？</p><p>從這個思路終於找到問題，不是 asyncjs 不能 async 跟 非async 混用，而是 <strong>你沒辦法用 JSON.stringify() 去顯示 Javascript 的 Error 型態</strong></p><p><a href="https://stackoverflow.com/questions/38513493/why-are-my-js-promise-catch-error-objects-empty">Why are my JS promise catch error objects empty?</a><br><a href="https://stackoverflow.com/questions/18391212/is-it-not-possible-to-stringify-an-error-using-json-stringify">Is it not possible to stringify an Error using JSON.stringify?</a></p><p>主要的原因在於 asyncjs 的 waterfall 在接到 throw error 的時候，會把它包裝成 error 的型態，在 callback 的時候當然沒辦法直接印出來</p><p>比較簡單解決的方法是去存取 error 的 message</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br>Async.waterfall([<br>  func1,<br>  func2,<br>], <span class="hljs-function">(<span class="hljs-params">error, result</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (error) <span class="hljs-built_in">console</span>.log(error.message)<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;result: &#x27;</span>, result);<br>&#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">function 1: 200 OK<br>阿伯～出事了！阿伯！ Test error<br><span class="hljs-keyword">Test </span>error<br></code></pre></div></td></tr></table></figure><p>為了這種初學者的問題卡了半天，學藝不精，真是慚愧 ( ´•̥̥̥ω•̥̥̥` )</p>]]></content>
    
    
    
    <tags>
      
      <tag>Troubleshooting</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
